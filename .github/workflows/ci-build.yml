name: build

on:
  push:
    branches:
    tags:
    paths:
      - ".github/workflows/ci-build.yml"
      - "app/**"
      - "frontend/**"
      - ".dockerignore"
      - "Dockerfile"
      - "!**.md"

  pull_request:
    paths:
      - ".github/workflows/ci-build.yml"
      - "app/**"
      - "frontend/**"
      - ".dockerignore"
      - "Dockerfile"
      - "!**.md"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 16.15.1 ]
    steps:
      - name: disable and stop mono-xsp4.service (wtf?)
        run: |
          sudo systemctl stop mono-xsp4.service || true
          sudo systemctl disable mono-xsp4.service || true

      - name: set up go 1.19
        uses: actions/setup-go@v2
        with:
          go-version: '1.19'
        id: go

      - name: checkout
        uses: actions/checkout@v2

      # test stage
      - name: build and test
        working-directory: app
        run: |
          go test -timeout=120s -v -race -p 1 -covermode=atomic -coverprofile=$GITHUB_WORKSPACE/profile.cov_tmp ./...
          cat $GITHUB_WORKSPACE/profile.cov_tmp | grep -v "_mock.go" > $GITHUB_WORKSPACE/profile.cov
          go build -race
        env:
          GO111MODULE: "on"
          CGO_ENABLED: "1"
      - name: install golangci-lint
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $GITHUB_WORKSPACE v1.50.1
          GO111MODULE=off go get -u -v github.com/mattn/goveralls
      - name: run linters
        working-directory: app
        run: $GITHUB_WORKSPACE/golangci-lint run


      # build frontend stage
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install dependencies
        uses: borales/actions-yarn@v4

      - name: Get yarn store directory
        id: yarn-cache
        run: |
          echo "::set-output name=yarn_cache_dir::$(yarn store path)"

      - name: Get yarn cache directory path
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache.outputs.yarn_cache_dir }}
          key: ${{ runner.os }}-yarn-store-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-store-

      - name: Install dependencies
        run: |
          yarn install
        working-directory: ./frontend

      - name: Build frontend
        run: |
          yarn build
        working-directory: ./frontend

      # build backend stage
      - name: set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: build and deploy master image to dockerhub
        if: ${{ github.ref == 'refs/heads/master' }}
        env:
          DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
          USERNAME: ${{ github.actor }}
          GITHUB_SHA: ${{ github.sha}}
          GITHUB_REF: ${{ github.ref}}
        run: |
          ref="$(echo ${GITHUB_REF} | cut -d'/' -f3)"
          echo GITHUB_REF - $ref
          echo ${DOCKER_HUB_TOKEN} | docker login -u ${USERNAME} --password-stdin
            docker buildx build --push \
                --build-arg CI=github --build-arg GITHUB_SHA=${GITHUB_SHA} --build-arg GIT_BRANCH=${ref} \
                --platform linux/amd64,linux/arm/v7,linux/arm64 \
                -t ${USERNAME}/reproxy:${ref} .

      - name: deploy tagged (latest) to dockerhub
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
              DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
              USERNAME: ${{ github.actor }}
              GITHUB_SHA: ${{ github.sha}}
              GITHUB_REF: ${{ github.ref}}
        run: |
              ref="$(echo ${GITHUB_REF} | cut -d'/' -f3)"
              echo GITHUB_REF - $ref
              echo ${DOCKER_HUB_TOKEN} | docker login -u ${USERNAME} --password-stdin
              docker buildx build --push \
                  --build-arg CI=github --build-arg GITHUB_SHA=${GITHUB_SHA} --build-arg GIT_BRANCH=${ref} \
                  --platform linux/amd64,linux/arm/v7,linux/arm64 \
                  -t ${USERNAME}/registry-admin:${ref} -t ${USERNAME}/registry-admin:latest .
    
